error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> $DIR/unsized-bare-typaram.rs:2:29
   |
LL | fn foo<T: ?Sized>() { bar::<T>() }
   |        -                    ^ doesn't have a size known at compile-time
   |        |
   |        this type parameter needs to be `std::marker::Sized`
   |
   = note: Trait(PolyTraitRef { bound_generic_params: [], trait_ref: TraitRef { path: Path { span: $DIR/unsized-bare-typaram.rs:1:11: 1:16 (#0), res: Def(Trait, DefId(2:2845 ~ core[ed10]::marker::Sized)), segments: [PathSegment { ident: Sized#0, hir_id: Some(HirId { owner: DefId(0:3 ~ unsized_bare_typaram[c59a]::bar), local_id: 3 }), res: Some(Def(Trait, DefId(2:2845 ~ core[ed10]::marker::Sized))), args: None, infer_args: false }] }, hir_ref_id: HirId { owner: DefId(0:3 ~ unsized_bare_typaram[c59a]::bar), local_id: 4 } }, span: $DIR/unsized-bare-typaram.rs:1:11: 1:16 (#0) }, None)
note: type parameters have an implicit `Sized` obligation
  --> $DIR/unsized-bare-typaram.rs:1:8
   |
LL | fn bar<T: Sized>() { }
   |        ^ required by this bound in `bar`
help: consider removing the `?Sized` bound to make the type parameter `Sized`
   |
LL | fn foo<T>() { bar::<T>() }
   |        --

error: aborting due to previous error

For more information about this error, try `rustc --explain E0277`.
