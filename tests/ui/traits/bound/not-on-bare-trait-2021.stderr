error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time
  --> $DIR/not-on-bare-trait-2021.rs:8:12
   |
LL | fn foo(_x: Foo + Send) {
   |            ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `(dyn Foo + Send + 'static)`
   = help: unsized fn params are gated as an unstable feature
help: you can use `impl Trait` as the argument type
   |
LL | fn foo(_x: impl Foo + Send) {
   |            ++++
help: function arguments must have a statically known size, borrowed types always have a known size
   |
LL | fn foo(_x: &(dyn Foo + Send)) {
   |            +++++           +

error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time
  --> $DIR/not-on-bare-trait-2021.rs:11:11
   |
LL | fn bar(x: Foo) -> Foo {
   |           ^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`
   = help: unsized fn params are gated as an unstable feature
help: you can use `impl Trait` as the argument type
   |
LL | fn bar(x: impl Foo) -> Foo {
   |           ++++
help: function arguments must have a statically known size, borrowed types always have a known size
   |
LL | fn bar(x: &dyn Foo) -> Foo {
   |           ++++

error[E0746]: return type cannot have an unboxed trait object
  --> $DIR/not-on-bare-trait-2021.rs:15:20
   |
LL | fn bat(x: &Foo) -> Foo {
   |                    ^^^ doesn't have a size known at compile-time
   |
help: return an `impl Trait` instead of a `dyn Trait`
   |
LL | fn bat(x: &Foo) -> impl Foo {
   |                    ++++
help: alternatively, box the return type to make a boxed trait object, and wrap all of the returned values in `Box::new`
   |
LL ~ fn bat(x: &Foo) -> Box<dyn Foo> {
LL |
LL |
LL ~     Box::new(x)
   |
help: finally, you might be able to borrow from the function's argument
   |
LL | fn bat(x: &Foo) -> &dyn Foo {
   |                    ++++

error[E0746]: return type cannot have an unboxed trait object
  --> $DIR/not-on-bare-trait-2021.rs:25:13
   |
LL | fn qux() -> Foo {
   |             ^^^ doesn't have a size known at compile-time
   |
   = help: if the returned value came from a borrowed argument that implements the trait, then you could return `&dyn Trait`
help: return an `impl Trait` instead of a `dyn Trait`
   |
LL | fn qux() -> impl Foo {
   |             ++++
help: alternatively, box the return type to make a boxed trait object, and wrap all of the returned values in `Box::new`
   |
LL ~ fn qux() -> Box<dyn Foo> {
LL |
LL ~     Box::new(todo!())
   |

error[E0782]: trait objects must include the `dyn` keyword
  --> $DIR/not-on-bare-trait-2021.rs:15:12
   |
LL | fn bat(x: &Foo) -> Foo {
   |            ^^^
   |
help: add `dyn` keyword before this trait
   |
LL | fn bat(x: &dyn Foo) -> Foo {
   |            +++

error[E0782]: trait objects must include the `dyn` keyword
  --> $DIR/not-on-bare-trait-2021.rs:20:12
   |
LL | fn bae(x: &Foo) -> &Foo {
   |            ^^^
   |
help: add `dyn` keyword before this trait
   |
LL | fn bae(x: &dyn Foo) -> &Foo {
   |            +++

error[E0782]: trait objects must include the `dyn` keyword
  --> $DIR/not-on-bare-trait-2021.rs:20:21
   |
LL | fn bae(x: &Foo) -> &Foo {
   |                     ^^^
   |
help: add `dyn` keyword before this trait
   |
LL | fn bae(x: &Foo) -> &dyn Foo {
   |                     +++

error: aborting due to 7 previous errors

Some errors have detailed explanations: E0277, E0746, E0782.
For more information about an error, try `rustc --explain E0277`.
