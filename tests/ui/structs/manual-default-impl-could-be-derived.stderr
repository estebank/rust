error: `impl Default` that could be derived
  --> $DIR/manual-default-impl-could-be-derived.rs:10:1
   |
LL | / impl Default for A {
LL | |     fn default() -> Self { A }
LL | | }
   | |_^
   |
note: the lint level is defined here
  --> $DIR/manual-default-impl-could-be-derived.rs:4:9
   |
LL | #![deny(default_could_be_derived)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
help: you don't need to manually `impl Default`, you can derive it
   |
LL - struct A;
LL + #[derive(Default)] struct A;
   |

error: `impl Default` that could be derived
  --> $DIR/manual-default-impl-could-be-derived.rs:17:1
   |
LL | / impl Default for B {
LL | |     fn default() -> Self { B(Default::default()) }
LL | | }
   | |_^
   |
help: you don't need to manually `impl Default`, you can derive it
   |
LL - struct B(Option<i32>);
LL + #[derive(Default)] struct B(Option<i32>);
   |

error: `impl Default` that could be derived
  --> $DIR/manual-default-impl-could-be-derived.rs:24:1
   |
LL | / impl Default for C {
LL | |     fn default() -> Self { C(None) }
LL | | }
   | |_^
   |
help: you don't need to manually `impl Default`, you can derive it
   |
LL - struct C(Option<i32>);
LL + #[derive(Default)] struct C(Option<i32>);
   |

error: `impl Default` that could be derived
  --> $DIR/manual-default-impl-could-be-derived.rs:35:1
   |
LL | / impl Default for D {
LL | |     fn default() -> Self {
LL | |         D {
LL | |             x: Default::default(),
...  |
LL | |     }
LL | | }
   | |_^
   |
help: you don't need to manually `impl Default`, you can derive it
   |
LL ~ #[derive(Default)] struct D {
   |

error: `impl Default` that could be derived
  --> $DIR/manual-default-impl-could-be-derived.rs:50:1
   |
LL | / impl Default for E {
LL | |     fn default() -> Self {
LL | |         E {
LL | |             x: None,
LL | |         }
LL | |     }
LL | | }
   | |_^
   |
help: you don't need to manually `impl Default`, you can derive it
   |
LL ~ #[derive(Default)] struct E {
   |

error: `impl Default` that could be derived
  --> $DIR/manual-default-impl-could-be-derived.rs:64:1
   |
LL | / impl<T> Default for F<T> {
LL | |     fn default() -> Self {
LL | |         F::Unit
LL | |     }
LL | | }
   | |_^
   |
help: you don't need to manually `impl Default`, you can derive it
   |
LL ~ #[derive(Default)] enum F<T> {
LL ~     #[default] Unit,
   |

error: `impl Default` that could be derived
  --> $DIR/manual-default-impl-could-be-derived.rs:75:1
   |
LL | / impl Default for G {
LL | |     fn default() -> Self {
LL | |         G {
LL | |             f: F::Unit,
LL | |         }
LL | |     }
LL | | }
   | |_^
   |
help: you don't need to manually `impl Default`, you can derive it
   |
LL ~ #[derive(Default)] struct G {
   |

error: `impl Default` that could be derived
  --> $DIR/manual-default-impl-could-be-derived.rs:89:1
   |
LL |   struct H {
   |   -------- all the fields in this struct have default values
LL |       x: i32 = 101,
   |                --- default value
...
LL | / impl Default for H {
LL | |     fn default() -> Self {
LL | |         H {
LL | |             x: 1,
LL | |         }
LL | |     }
LL | | }
   | |_^
   |
help: to avoid divergence in behavior between `Struct { .. }` and `<Struct as Default>::default()`, derive the `Default`
   |
LL ~ #[derive(Default)] struct H {
   |

error: `impl Default` that could be derived
  --> $DIR/manual-default-impl-could-be-derived.rs:104:1
   |
LL |   struct I {
   |   -------- all the fields in this struct have default values or a type that impls `Default`
LL |       x: i32 = 101,
   |                --- default value
LL |       y: Option<i32>,
   |          ----------- implements `Default`
...
LL | / impl Default for I {
LL | |     fn default() -> Self {
LL | |         I {
LL | |             x: 1,
...  |
LL | |     }
LL | | }
   | |_^
   |
help: to avoid divergence in behavior between `Struct { .. }` and `<Struct as Default>::default()`, derive the `Default`
   |
LL ~ #[derive(Default)] struct I {
   |

error: `impl Default` that could be derived
  --> $DIR/manual-default-impl-could-be-derived.rs:119:1
   |
LL | / impl Default for J {
LL | |     fn default() -> Self {
LL | |         J {
LL | |             x: foo(), // fn call that isn't an assoc fn
LL | |         }
LL | |     }
LL | | }
   | |_^
   |
help: you don't need to manually `impl Default`, you can derive it
   |
LL ~ #[derive(Default)] struct J {
   |

error: `impl Default` that could be derived
  --> $DIR/manual-default-impl-could-be-derived.rs:145:1
   |
LL | / impl Default for L {
LL | |     fn default() -> Self {
LL | |         L {
LL | |             x: Vec::new(), // `<Vec as Default>::default()` just calls `Vec::new()`
LL | |         }
LL | |     }
LL | | }
   | |_^
   |
help: you don't need to manually `impl Default`, you can derive it
   |
LL ~ #[derive(Default)] struct L {
   |

error: aborting due to 11 previous errors

